<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IndexedHashTable</name>
    </assembly>
    <members>
        <member name="T:IndexedHashTable.cIndexedHashTable">
            <summary>
               A hashtable class that gives access to a list of items by integer index or by key.
               Thus, the class behaves as a hashtable or as an array.  Items are ordered in
               the order in which they are placed in the list unless the InsertAt method is
               used.  The order of the items in the list may be randomly scrambled with the 
               ScrambleOrder method.
            </summary>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.#ctor(Random.cUniformRandom)">
            <summary>
            	The default constructor.
            </summary>
        </member>
        <member name="P:IndexedHashTable.cIndexedHashTable.Item(System.Int32)">
            <summary>
            	Get or set the value of an item in the table indexed by its numeric index.  If
            	Index is less than zero or greater than the number of items in the list minus
            	one, an ArgumentOutOfRangeException exception is raised.
            </summary>
        </member>
        <member name="P:IndexedHashTable.cIndexedHashTable.Item(System.String)">
            <summary>
            	Get or set the value of an item in the table indexed by its key value.  If key
            	is not found in the table, an ArgumentException exception is raised.
            </summary>
        </member>
        <member name="P:IndexedHashTable.cIndexedHashTable.Count">
             <summary>
            Get the number of items in the list 
             </summary>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.Add(System.String,System.Object)">
            <summary>
            	Add an item to the end of the table with the given key value.
            </summary>
            <param name="key">
            	The key value of the item.  An ArgumentNullException exception is raised if
            	key is null.  An ArgumentException exception is raised if the key already
            	exists in the collection.
            </param>
            <param name="item">The item being added to the table.</param>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.Add(System.Object)">
            <summary>
            	Add an item to the end of the table.  A unique key value is automatically
            	created for the item.  This key value will take the form 
            	"cIndexedHashTable_Key_XXXX" (where XXXX is a number from 1 to 2^63).
            </summary>
            <param name="item">The item being added to the table.</param>
            <returns>The position of the item in the table (0 based).</returns>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.Insert(System.Int32,System.Object)">
            <summary>
            	Insert an item into the table at a given position.  A unique key value
            	is automatically created for the item.  This key value will take the form 
            	"cIndexedHashTable_Key_XXXX" (where XXXX is a number from 1 to 2^63).
            </summary>
            <param name="position">
            	The position of the item in the table (0 based).  An ArgumentOutOfRangeException
            	exception is raised if position is less than zero or greater than the number of
            	items in the list minus one.
            </param>
            <param name="item">The item being added to the table.</param>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.Insert(System.Int32,System.String,System.Object)">
            <summary>
            	Insert an item into the table at a given position.
            </summary>
            <param name="position">
            	The position of the item in the table (0 based).  An ArgumentOutOfRangeException
            	exception is raised if position is less than zero or greater than the number of
            	items in the list minus one.
            </param>
            <param name="key">
            	The key value of the item.  An ArgumentNullException exception is raised if
            	key is null.  An ArgumentException exception is raised if the key already
            	exists in the collection.
            </param>
            <param name="item">The item being added to the table.</param>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.ContainsKey(System.String)">
             <summary>
            Determine whether or not the list contains an item with the specified key 
             </summary>
             <param name="key">
             The key to search for
             </param>
             <returns>
             True if an item in the list has the key, false otherwise
             </returns>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.Clear">
            <summary>
            	Remove all items from the table.
            </summary>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.GetKey(System.Int32)">
            <summary>
            	Get the key value of the item at the specified position.
            </summary>
            <param name="position">
            	The position of the item in the table (0 based).  An ArgumentOutOfRangeException
            	exception is raised if position is less than zero or greater than the number of
            	items in the list minus one.
            </param>
            <returns></returns>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.Remove(System.String)">
            <summary>
            	Remove the item from the table with the given key value.
            </summary>
            <param name="key">
            	The key value of the item to remove.  An ArgumentNullException exception is
            	raised if key is null.
            </param>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.RemoveAt(System.Int32)">
            <summary>
            	Remove the item from the table at the given index position.
            </summary>
            <param name="index">
            	The index position of the item to remove. An ArgumentOutOfRangeException
            	exception is raised if index is less than zero or greater than the number 
            	of items in the list minus one.
            </param>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.Clone">
            <summary>
            	Make a copy of this table.  The copy is a complete copy, not just a
            	reference to the same table.  The same scramble random number generator
            	is used
            </summary>
            <returns>A reference to the copy.</returns>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.CopyTo(System.Array,System.Int32)">
            <summary>
            	Copy all items in the table into an array.  Items are copied into the 
            	array in their current order.
            </summary>
            <param name="theArray">
            	The array receiving the items in the list.  It must be size appropriatly
            	to hold all items in the table.  A RankException is raised if the array has
            	more than one dimension.  An ArgumentException is raised if the array does
            	not have enough elements to hold the contents of the list.
            </param>
            <param name="ArrayIndex">
            	The position in the array of the first item in the list.  An
            	ArgumentOutOfRangeException exception is raised if ArrayIndex is less than
            	zero.
            </param>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.IndexOf(System.Object)">
            <summary>
            	Returns the position of the passed item in the table.  NOTE: this
            	function is relatively inefficient and should not be called repeatedly.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>
            	The position of the item in the table.  -1 is returned if the item is
            	not found.
            </returns>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.ScrambleOrder">
            <summary>
            	Scramble the order of the items in the list. This affects the order returned
            	by integer index values and the enumerator.
            </summary>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.SortKeys">
            <summary>
            	Sort the list by the key values.  This affects the order returned
            	by integer index values and the enumerator.
            </summary>
        </member>
        <member name="M:IndexedHashTable.cIndexedHashTable.GetEnumerator">
            <summary>
            	Get an enumerator for the cIndexHashTable.
            </summary>
            <returns>The enumerator as an IEnumerator.</returns>
        </member>
    </members>
</doc>
